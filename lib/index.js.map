{"version":3,"sources":["../src/index.js"],"names":["YateDriver","response","connOpts","role","id","type","onMessage","log","messages","connection","handler","send","dispatchMessage","msg","res","rej","key","set","setLocal","name","value","output","str","install","prio","filterName","filterVal","uninstall","message","retval","params","Math","ceil","Date","now","watch","unwatch","cb","get","then","catch","e","error","warn"],"mappings":";;;;;;;;;;;;;;;kBAIwBA,U;;AAFxB;;;;;oBA2ESC,Q;;;;AA7ET;;;;AACA;;;;AAGe,SAASD,UAAT,CAAoBE,QAApB,EAA8B,EAAEC,OAAO,QAAT,EAAmBC,EAAnB,EAAuBC,IAAvB,KAAgC,EAA9D,EAAkEC,SAAlE,EAA6EC,GAA7E,EAAkF;AAC/F,QAAMC,WAAW,mBAAjB;AACA,QAAMC,aAAa,0BAAWP,QAAX,EAAqBQ,OAArB,EAA8BH,GAA9B,CAAnB;AACAE,aAAWE,IAAX,CAAgB,qBAAY,YAAZ,EAA0BR,IAA1B,EAAgCC,EAAhC,EAAoCC,IAApC,CAAhB;;AAEA,WAASO,eAAT,CAAyBC,GAAzB,EAA8B;AAC5B,WAAO,sBAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/B,YAAMC,MAAM,sBAAQH,GAAR,CAAZ;;AAEAJ,iBAAWE,IAAX,CAAgBE,GAAhB;;AAEA,UAAIG,GAAJ,EAAS;AACPR,iBAASS,GAAT,CAAaD,GAAb,EAAkB,CAACF,GAAD,EAAMC,GAAN,CAAlB;AACD,OAFD,MAEO;AACLD,YAAI,IAAJ;AACD;AACF,KAVM,CAAP;AAWD;;AAED,WAASI,QAAT,CAAkBC,IAAlB,EAAwBC,QAAQ,EAAhC,EAAoC;AAClC,UAAMP,MAAM,qBAAY,aAAZ,EAA2BM,IAA3B,EAAiCC,KAAjC,CAAZ;AACA,WAAOR,gBAAgBC,GAAhB,CAAP;AACD;;AAED,WAASQ,MAAT,CAAgBC,GAAhB,EAAqB;AACnB,UAAMT,MAAM,qBAAY,WAAZ,EAAyBS,GAAzB,CAAZ;AACA,WAAOV,gBAAgBC,GAAhB,CAAP;AACD;;AAED,WAASU,OAAT,CAAiBJ,IAAjB,EAAuBK,OAAO,EAA9B,EAAkCC,UAAlC,EAA8CC,SAA9C,EAAyD;AACvD,UAAMb,MAAM,qBAAY,YAAZ,EAA0BW,IAA1B,EAAgCL,IAAhC,EAAsCM,UAAtC,EAAkDC,SAAlD,CAAZ;AACA,WAAOd,gBAAgBC,GAAhB,CAAP;AACD;;AAED,WAASc,SAAT,CAAmBR,IAAnB,EAAyB;AACvB,WAAOP,gBAAgB,qBAAY,cAAZ,EAA4BO,IAA5B,CAAhB,CAAP;AACD;;AAED,WAASS,OAAT,CAAiBT,IAAjB,EAAuBU,MAAvB,EAA+BC,SAAS,EAAxC,EAA4C;AAC1C,UAAMjB,MAAM,qBAAY,YAAZ,EAA0B,mBAA1B,EAAoCkB,KAAKC,IAAL,CAAUC,KAAKC,GAAL,KAAa,IAAvB,CAApC,EAAkEf,IAAlE,EAAwEW,MAAxE,CAAZ;AACA,WAAOlB,gBAAgBC,GAAhB,CAAP;AACD;;AAED,WAASsB,KAAT,CAAehB,IAAf,EAAqB;AACnB,WAAOP,gBAAgB,qBAAY,UAAZ,EAAwBO,IAAxB,CAAhB,CAAP;AACD;;AAED,WAASiB,OAAT,CAAiBjB,IAAjB,EAAuB;AACrB,WAAOP,gBAAgB,qBAAY,YAAZ,EAA0BO,IAA1B,CAAhB,CAAP;AACD;;AAED,WAAST,OAAT,CAAiBG,GAAjB,EAAsB;AACpB,UAAMG,MAAM,sBAAQH,GAAR,CAAZ;AACA,QAAIG,GAAJ,EAAS;AACP,YAAMqB,KAAK7B,SAAS8B,GAAT,CAAatB,GAAb,CAAX;AACA,UAAIqB,EAAJ,EAAQ;AACNA,WAAG,CAAH,EAAMxB,GAAN;AACD,OAFD,MAEO;AACLP,kBAAUO,GAAV,EACG0B,IADH,CACQ9B,WAAWE,IADnB,EAEG6B,KAFH,CAEUC,CAAD,IAAO;AACZlC,cAAImC,KAAJ,CAAU,GAAV,EAAeD,CAAf;AACApB,iBAAOoB,EAAEb,OAAT;AACD,SALH;AAMD;AACF,KAZD,MAYO;AACLrB,UAAIoC,IAAJ,CAAS,cAAT,EAAyB9B,GAAzB;AACD;AACF;;AAED,SAAO,EAAEK,QAAF,EAAYG,MAAZ,EAAoBO,OAApB,EAA6BL,OAA7B,EAAsCI,SAAtC,EAAiDQ,KAAjD,EAAwDC,OAAxD,EAAP;AACD","file":"index.js","sourcesContent":["import Connection from './connection';\nimport { randId } from './util';\nimport { Message, makeKey } from './message';\n\nexport default function YateDriver(connOpts, { role = 'global', id, type } = {}, onMessage, log) {\n  const messages = new Map();\n  const connection = Connection(connOpts, handler, log);\n  connection.send(new Message('%%>connect', role, id, type));\n\n  function dispatchMessage(msg) {\n    return new Promise((res, rej) => {\n      const key = makeKey(msg);\n\n      connection.send(msg);\n\n      if (key) {\n        messages.set(key, [res, rej]);\n      } else {\n        res(true);\n      }\n    });\n  }\n\n  function setLocal(name, value = '') {\n    const msg = new Message('%%>setlocal', name, value);\n    return dispatchMessage(msg);\n  }\n\n  function output(str) {\n    const msg = new Message('%%>output', str);\n    return dispatchMessage(msg);\n  }\n\n  function install(name, prio = 50, filterName, filterVal) {\n    const msg = new Message('%%>install', prio, name, filterName, filterVal);\n    return dispatchMessage(msg);\n  }\n\n  function uninstall(name) {\n    return dispatchMessage(new Message('%%>uninstall', name));\n  }\n\n  function message(name, retval, params = {}) {\n    const msg = new Message('%%>message', randId(), Math.ceil(Date.now() / 1000), name, params);\n    return dispatchMessage(msg);\n  }\n\n  function watch(name) {\n    return dispatchMessage(new Message('%%>watch', name));\n  }\n\n  function unwatch(name) {\n    return dispatchMessage(new Message('%%>unwatch', name));\n  }\n\n  function handler(msg) {\n    const key = makeKey(msg);\n    if (key) {\n      const cb = messages.get(key);\n      if (cb) {\n        cb[0](msg);\n      } else {\n        onMessage(msg)\n          .then(connection.send)\n          .catch((e) => {\n            log.error('E', e);\n            output(e.message);\n          });\n      }\n    } else {\n      log.warn('UnhandledMsg', msg);\n    }\n  }\n\n  return { setLocal, output, message, install, uninstall, watch, unwatch };\n}\n\nexport { response } from './message';\n"]}