{"version":3,"sources":["../src/util.js"],"names":["b2s","s2b","escape","unescape","randId","QUOTE_CHAR","b","s","str","extra","undefined","toString","res","idx","length","chr","charAt","chrCode","charCodeAt","String","fromCharCode","nextChr"],"mappings":";;;;;;QAIgBA,G,GAAAA,G;QAIAC,G,GAAAA,G;QAIAC,M,GAAAA,M;QA2BAC,Q,GAAAA,Q;QAwBAC,M,GAAAA,M;;AA/DhB;;AAEO,MAAMC,kCAAa,GAAnB;;AAEA,SAASL,GAAT,CAAaM,CAAb,EAAgB;AACrB,SAAOA,IAAI,MAAJ,GAAa,OAApB;AACD;;AAEM,SAASL,GAAT,CAAaM,CAAb,EAAgB;AACrB,SAAOA,MAAM,MAAb;AACD;;AAEM,SAASL,MAAT,CAAgBM,GAAhB,EAAqBC,KAArB,EAA4B;AACjC,MAAID,QAAQE,SAAZ,EAAuB;AACrB,WAAO,WAAP;AACD;;AAED,MAAI,OAAOF,GAAP,KAAe,SAAnB,EAA8B;AAC5B,WAAOR,IAAIQ,GAAJ,CAAP;AACD;;AAEDA,QAAMA,IAAIG,QAAJ,EAAN;AACA,MAAIC,MAAM,EAAV;AACA,OAAK,IAAIC,MAAM,CAAf,EAAkBA,MAAML,IAAIM,MAA5B,EAAoCD,KAApC,EAA2C;AACzC,UAAME,MAAMP,IAAIQ,MAAJ,CAAWH,GAAX,CAAZ;AACA,UAAMI,UAAUF,IAAIG,UAAJ,CAAe,CAAf,CAAhB;;AAEA,QAAKD,UAAU,EAAX,IAAmBF,QAAQ,GAA3B,IAAoCA,QAAQN,KAAhD,EAAwD;AACtDG,aAAOP,aAAac,OAAOC,YAAP,CAAoBH,UAAU,EAA9B,CAApB;AACD,KAFD,MAEO,IAAIF,QAAQV,UAAZ,EAAwB;AAC7BO,aAAOP,aAAaA,UAApB;AACD,KAFM,MAEA;AACLO,aAAOG,GAAP;AACD;AACF;;AAED,SAAOH,GAAP;AACD;;AAEM,SAAST,QAAT,CAAkBK,GAAlB,EAAuB;AAC5B,MAAII,MAAM,EAAV;;AAEA,MAAIJ,QAAQ,MAAR,IAAkBA,QAAQ,OAA9B,EAAuC;AACrC,WAAOP,IAAIO,GAAJ,CAAP;AACD;;AAED,OAAK,IAAIK,MAAM,CAAf,EAAkBA,MAAML,IAAIM,MAA5B,EAAoCD,KAApC,EAA2C;AACzC,UAAME,MAAMP,IAAIQ,MAAJ,CAAWH,GAAX,CAAZ;AACA,QAAIE,QAAQV,UAAZ,EAAwB;AACtB,YAAMgB,UAAUb,IAAIQ,MAAJ,CAAW,EAAEH,GAAb,CAAhB;AACA,UAAIQ,YAAYhB,UAAhB,EAA4B;AAC1BO,eAAOG,GAAP;AACD,OAFD,MAEO;AACLH,eAAOO,OAAOC,YAAP,CAAoBC,QAAQH,UAAR,CAAmB,CAAnB,IAAwB,EAA5C,CAAP;AACD;AACF,KAPD,MAOO;AACLN,aAAOG,GAAP;AACD;AACF;;AAED,SAAOH,GAAP;AACD;;AAEM,SAASR,MAAT,GAAkB;AACvB,SAAO,yBAAY,EAAZ,EAAgBO,QAAhB,CAAyB,KAAzB,CAAP;AACD","file":"util.js","sourcesContent":["import { randomBytes } from 'crypto';\n\nexport const QUOTE_CHAR = '%';\n\nexport function b2s(b) {\n  return b ? 'true' : 'false';\n}\n\nexport function s2b(s) {\n  return s === 'true';\n}\n\nexport function escape(str, extra) {\n  if (str === undefined) {\n    return 'undefined';\n  }\n\n  if (typeof str === 'boolean') {\n    return b2s(str);\n  }\n\n  str = str.toString();\n  let res = '';\n  for (let idx = 0; idx < str.length; idx++) {\n    const chr = str.charAt(idx);\n    const chrCode = chr.charCodeAt(0);\n\n    if ((chrCode < 32) || (chr === ':') || (chr === extra)) {\n      res += QUOTE_CHAR + String.fromCharCode(chrCode + 64);\n    } else if (chr === QUOTE_CHAR) {\n      res += QUOTE_CHAR + QUOTE_CHAR;\n    } else {\n      res += chr;\n    }\n  }\n\n  return res;\n}\n\nexport function unescape(str) {\n  let res = '';\n\n  if (str === 'true' || str === 'false') {\n    return s2b(str);\n  }\n\n  for (let idx = 0; idx < str.length; idx++) {\n    const chr = str.charAt(idx);\n    if (chr === QUOTE_CHAR) {\n      const nextChr = str.charAt(++idx);\n      if (nextChr === QUOTE_CHAR) {\n        res += chr;\n      } else {\n        res += String.fromCharCode(nextChr.charCodeAt(0) - 64);\n      }\n    } else {\n      res += chr;\n    }\n  }\n\n  return res;\n}\n\nexport function randId() {\n  return randomBytes(32).toString('hex');\n}\n"]}